Software Architecture Document for Bad Defender


1. Introduction

1.1 Purpose

This document provides a comprehensive architectural overview of the 
system, using a number of different architectural views to depict different a
spects of the system.  It is intended to capture and convey the significant a
rchitectural decisions which have been made on the system.


1.2  Scope

The scope of Bad Defender is that a prototype of it will be completed before the beginning of
the 2019 Fall semester, the goal of this prototype is  a playable game with >= 3 fully playable
levels, the tasks that need to be completed for this will be listed in the Project Section on the
GitHub repository. A player will be able to move their ship through >= 3 playable levels that involves,
shooting down enemy ships, avoiding lethal obstacles and enemy projectiles, and defeating
a boss at the end of each level (or possibly only the final level).


1.3  Definitions, Acronyms and Abbreviations

[This subsection should provide the definitions of all terms, acronyms, 
and abbreviations required to properly interpret the Software Architecture
 Document.  This information may be provided by reference to the project Glossary.]
TODO ADD THINGS


1.4 Overview

[This subsection should describe what the rest of the Software 
Architecture Document contains and explain how the Software Architecture Document is organized.]



2. Architectural Representation

[This section describes what software architecture is for the current system,
 and how it is represented. Of the Use-Case, Logical, Process, Deployment, and
  Implementation Views, it enumerates the views that are necessary, and for each
   view, explains what types of model elements it contains.]

2.1 Use-Case

Actors
Player of the Game
  The goal of this actor is to be challenged by this game to want to finish it
  this will be accomplished by making intuitive controls that the player can 
  remember and use fluidly to play the game. The overall goal of the Player is
  to finish the game.

Use-cases
  The player actor wishes to not die from enemies or obstacles and will use the controls
  provided to help them.

  The controls for the player will be located on the title screen of the game for the player
  to read in order to complete the game.

  After completion of each level, the user will be congratulated on beating the level.

  After completion of the last level, the user will be able to enter their initials into the database
  that holds all of the high scores of the game.


2.2 Logical 

Objects
Background Objects 
  These objects will be rendered by the system first so that the movable/lethal objects can
  be rendered ontop of them so that the player can see themselves as well as hazards. These 
  objects are purely cosmetic and do not affect what is happening in the game at all.

Screen Objects 
  Screen Objects are rendered after the background objects and will do all of the actual 
  interaction with the player. Screen objects will include: the player, friendly/lethal 
  projectiles, Enemy ships, obstacles (land mines) and bosses.

Levels 
  The levels that make up the game will consist of a window that moves alongside a much
  larger image and will contain all of the enemies, obstacles etc.


Classes
Screen_Object
  Instance Variables
    Position: Point(X,Y)
  Methods
    GetX [Retrieves the X Coordinate]
    SetX [Sets the X Coordinate]
    GetY [Retrieves the Y Coordinate]
    SetY [Sets the Y Coordinate]

Player (extends Screen_Object)
  Instance Variables
    Int numLives = 3
    Int score
  Methods
    moveUp [Moves the spaceship up by decreasing the super(SetX)]
    moveDown [Moves the spaceship down by increasing the super(SetX)]
    shoot [Fires a projectile from the spaceship]
    loseLife [Decrements numLives by 1]


Enemy (extends Screen_Object)
  Instance Variables
    int numPoints [Number of points the enemy will give to the player]
  Methods
    followPlayer [Will change the Super(X) coordinate to follow the player]
    shoot [will fire a projectile toward the player]

Projectile (extends Screen_Object)
  Instance Variables
  Methods

Obstacle (Extends Screen_Object)
  Instance Variables
  Methods

Background_Object (Extends Screen_Object)
  Instance Variables
  Methods

Packages

This game relies on the open-source framework PIXIJS. This framework offloads the rendering to
the machine's Graphics Processing Unit so that it can run at a silky smooth 60 FPS.


2.3 Implementation View

MAKE A PICTURE DIAGRAM 


2.4 Process View

The Process of this program will consist of an infinite loop called the game loop, with four 
key steps.

  i. Accept User Inputs 
  ii. Change coordinates of objects
  iii. Detect any collisions and react accordingly
  iv. Render the objects in their new coordinates


2.5 Deployment View

This project will be deployed on a Boise State University server and will be made publicly and
freely available on the web.


2.6 Data View

A mySQL database will be used to store the high scores (if the user wishes to submit) and 
will be able to be viewed from the title screen. HashTables will be used to store all of 
the Screen_Objects that are rendered onscreen. When the on-screen rendering is performed, 
the entire HashTable will be walked through, but for fast inserting and deleting, a HashTable 
will be used.



3. Architectural Goals and Constraints

The goal of this product is to create a simple, lightweight game using the PIXIJS framework,
that will be completed by the end of Summer 2019. The only obstacles I have facing me in
this project is the amount of time I currently have to dedicate to it.



4. Use-Case View

The user will be able to: View the instructions for the game, View the highscores of the
game saved in the mySQL database, begin the game, move the ship up and down, and fire 
missles.


4.1  Use-Case Realizations

 TODO: CREATE A UML DIAGRAM


5. Logical View

[This section describes the architecturally significant parts of the design model,
 such as its decomposition into subsystems and packages. And for each significant 
 package, its decomposition into classes and class utilities. You should introduce 
 architecturally significant classes and describe their responsibilities, as well 
 as a few very important relationships, operations, and attributes.]


5.1               Overview

[This subsection describes the overall decomposition of the design model in terms of its package hierarchy and layers.]
5.2               Architecturally Significant Design Packages

[For each significant package, include a subsection with its name, its brief description, and a diagram with all significant classes and packages contained within the package.

For each significant class in the package, include its name, brief description, and, optionally a description of some of its major responsibilities, operations and attributes.]
6.                  Process View

[This section describes the system's decomposition into lightweight processes (single threads of control) and heavyweight processes (groupings of lightweight processes). Organize the section by groups of processes that communicate or interact. Describe the main modes of communication between processes, such as message passing, interrupts, and rendezvous.]
7.                  Deployment View

[This section describes one or more physical network (hardware) configurations on which the software is deployed and run. It is a view of the Deployment Model. At a minimum for each configuration it should indicate the physical nodes (computers, CPUs) that execute the software, and their interconnections (bus, LAN, point-to-point, and so on.) Also include a mapping of the processes of the Process View onto the physical nodes.]
8.                  Implementation View

[This section describes the overall structure of the implementation model, the decomposition of the software into layers and subsystems in the implementation model, and any architecturally significant components.]
8.1               Overview

[This subsection names and defines the various layers and their contents, the rules that govern the inclusion to a given layer, and the boundaries between layers. Include a component diagram that shows the relations between layers. ]
8.2               Layers

[For each layer, include a subsection with its name, an enumeration of the subsystems located in the layer, and a component diagram.]
9.                  Data View (optional)

[A description of the persistent data storage perspective of the system. This section is optional if there is little or no persistent data, or the translation between the Design Model and the Data Model is trivial.]
10.             Size and Performance

[A description of the major dimensioning characteristics of the software that impact the architecture, as well as the target performance constraints.]
11.             Quality

[A description of how the software architecture contributes to all capabilities (other than functionality) of the system: extensibility, reliability, portability, and so on. If these characteristics have special significance, for example safety, security or privacy implications, they should be clearly delineated.]